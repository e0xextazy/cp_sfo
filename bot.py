import asyncio
import logging
import os
import sys
import json

import httpx
import requests
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
    PollAnswer,
    URLInputFile,
)
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
load_dotenv(".env")

bot = Bot(token=str(os.getenv("BOT_TOKEN")))
BD_API = str(os.getenv("BD_API"))
dp = Dispatcher()
form_router = Router()
dp.include_router(form_router)
N_TRIES = 2
import os


async def save_message_database(chat_id, type, text):
    data = {"chat_id": chat_id, "message": {"type": type, "text": text}}

    async with httpx.AsyncClient() as client:
        response = await client.post(BD_API, json=data)
        if response.status_code == 200:
            logger.info("Message saved successfully")
        else:
            logger.error(f"Failed to save message: {response.text}")


def load_faq(directory="faq_answers"):
    faq_answers = dict()
    for path in os.listdir(directory):
        theme = path.split(".")[0]
        with open(os.path.join(directory, path), "r", encoding='UTF8') as f:
            faq_answers[theme] = f.read()

    return faq_answers


FAQ_ANSWERS = load_faq()


async def on_startup(dp):
    asyncio.create_task(weekly_survey())  # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–Ω—É—Ç—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.create_task(check_document_updates())


class UserState(StatesGroup):
    main_menu = State()
    faq_menu = State()
    message_count = State()
    search_colleague = State()
    wait_course_description = State()


def get_main_menu_markup():
    item1 = InlineKeyboardButton(text="‚ùì FAQ", callback_data="all_faq")
    item2 = InlineKeyboardButton(
        text="üë±‚Äç‚ôÄÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É üë±‚Äç‚ôÄÔ∏è", callback_data="ask"
    )
    item3 = InlineKeyboardButton(
        text="üìÅ –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ üìÅ", callback_data="doc_template"
    )
    item4 = InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –∫–æ–ª–ª–µ–≥—É", callback_data="search_colleague")
    item6 = InlineKeyboardButton(text="üë®‚Äçüéì –ù–∞–π—Ç–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å", callback_data="search_course")

    item5 = InlineKeyboardButton(text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?", callback_data="None", url="https://youtu.be/5ZBoqkwkMAo")

    markup = InlineKeyboardMarkup(inline_keyboard=[[item1, item4], [item3], [item6], [item2], [item5]])
    return markup


### –∑–¥–µ—Å—å –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
### chat id –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ DB API (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥)
def get_answer(chat_id, question):
    # json.loads(r2.text) -> {'response': '60% —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—Ç–∞–∂ –æ—Ç 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ 5 –ª–µ—Ç; 80% –æ—Ç 5 –¥–æ 8 –ª–µ—Ç; 100% –±–æ–ª–µ–µ 8 –ª–µ—Ç.'}
    resp = requests.post("https://9fa3-62-217-190-168.ngrok.io/get_answer",
                        data=json.dumps({"query": question}))
    resp = json.loads(resp.text)['response']
    return resp


def get_contact_info(query):
    return "–ü–æ—á—Ç–∞: ivan_ivanov@smart.ru"


def time_until_next_week():
    return 3600 * 7


# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è save_poll_answer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_poll_answer(user_id: int, poll_id: str, option_ids: list):
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pass


@dp.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    user_id = poll_answer.user.id
    poll_id = poll_answer.poll_id
    # —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    option_ids = poll_answer.option_ids

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
    save_poll_answer(user_id, poll_id, option_ids)


@form_router.callback_query(lambda c: c.data and c.data.startswith("search_course"))
async def request_colleague_name(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(UserState.wait_course_description)

    item_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    markup = InlineKeyboardMarkup(inline_keyboard=[[item_back]])
    
    text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
           f"\n\n–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –Ω–∞–≤—ã–∫ –í–∞–º —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–ª—É—á–∏—Ç—å? –ö–∞–∫–æ–π –í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ?"
    
    await bot.edit_message_text(
        text,
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )



@form_router.message(UserState.wait_course_description)
async def search_colleague(message: types.Message, state: FSMContext):
    query = message.text
    # contact_info = get_contact_info(query)
    course_info = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
                   f"\n\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</b>"\
                   f'\n1. <a href="https://stepik.org/course/401/promo">–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏</a>'\
                   f'\n2. <a href="https://stepik.org/course/50352/info">–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ</a>'\
                   f'\n3. <a href="https://stepik.org/course/67/promo">–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python</a>'\
                   
    await state.clear()
    await message.reply(
        course_info,
        reply_markup=None,  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –§–ò–û
        parse_mode="HTML"
    )
    text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
           f"\n\n<b>–ò–º—è:</b> {message.from_user.first_name}"\
           f"\n<b>–°–ª–µ–¥—É—é—â–∞—è –ó–ü:</b> 01.10.2023"\
           f"\n<b>–î–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞:</b> 15"\
           f"\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–±–æ—Ç—ã, –ø—Ä–æ—Å—Ç–æ <u>–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É</u>  –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."
    await message.answer(text=text, reply_markup=get_main_menu_markup(), parse_mode="HTML")


# –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
# –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –±—ç–∫–∞
async def check_document_updates():
    while True:
        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–Ω–µ—à–Ω–µ–º —Å–µ—Ä–≤–∏—Å–µ)
        updates = False
        if updates:
            message_text = f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n{updates}"
            for user_id in []:
                await bot.send_message(user_id, message_text)
        await asyncio.sleep(3600 * 8)  # –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    search_colleague = State()  # –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@form_router.callback_query(lambda c: c.data and c.data.startswith("search_colleague"))
async def request_colleague_name(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(UserState.search_colleague)

    item_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    markup = InlineKeyboardMarkup(inline_keyboard=[[item_back]])
    
    text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
           f"\n\n–í–≤–µ–¥–∏—Ç–µ <u>–§–ò–û</u> –∫–æ–ª–ª–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"
    
    await bot.edit_message_text(
        text,
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )


@form_router.message(UserState.search_colleague)
async def search_colleague(message: types.Message, state: FSMContext):
    query = message.text
    # contact_info = get_contact_info(query)
    contact_info = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
                   f"\n\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</b>"\
                   f"\n<b>–§–ò–û</b>: {query}"\
                   f"\n<b>–ü–æ—á—Ç–∞</b>: cf_pror@mail.ru"\
                   f"\n<b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã</b>: 10:00-17:00"
    await state.clear()
    await message.reply(
        contact_info,
        reply_markup=None,  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –§–ò–û
        parse_mode="HTML"
    )
    text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
           f"\n\n<b>–ò–º—è:</b> {message.from_user.first_name}"\
           f"\n<b>–°–ª–µ–¥—É—é—â–∞—è –ó–ü:</b> 01.10.2023"\
           f"\n<b>–î–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞:</b> 15"\
           f"\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–±–æ—Ç—ã, –ø—Ä–æ—Å—Ç–æ <u>–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É</u>  –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."
    await message.answer(text=text, reply_markup=get_main_menu_markup(), parse_mode="HTML")


async def weekly_survey():
    while True:
        # –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏
        await asyncio.sleep(time_until_next_week())
        poll_options = ["–õ–µ–≥–∫–æ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ"]
        for user_id in []:
            await bot.send_poll(user_id, "–ö–∞–∫ –ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è?", poll_options)


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    welcome_text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
                   f"\n\n<b>–ò–º—è:</b> {message.from_user.first_name}"\
                   f"\n<b>–°–ª–µ–¥—É—é—â–∞—è –ó–ü:</b> 01.10.2023"\
                   f"\n<b>–î–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞:</b> 15"\
                   f"\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–±–æ—Ç—ã, –ø—Ä–æ—Å—Ç–æ <u>–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É</u>  –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."
    markup = get_main_menu_markup()
    await message.answer(welcome_text, reply_markup=markup, parse_mode="HTML")


### –®–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ PDF ###
@dp.callback_query(lambda c: c.data and c.data.startswith("doc_template"))
async def show_doc_template_menu(callback_query: types.CallbackQuery):
    item1 = InlineKeyboardButton(text="üèñÔ∏è –û—Ç–ø—É—Å–∫", callback_data="doc_vacation")
    item2 = InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –ë–æ–ª—å–Ω–∏—á–Ω—ã–π", callback_data="doc_sick_leave")
    item3 = InlineKeyboardButton(text="üõ´ –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", callback_data="doc_business_trip")
    back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")

    markup = InlineKeyboardMarkup(inline_keyboard=[[item1], [item2], [item3], [back]])

    text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
           f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç"

    await bot.edit_message_text(
        text=text,
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )


@dp.callback_query(lambda c: c.data and c.data.startswith("doc_"))
async def send_template_document(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    callback_data = callback_query.data
    text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>\n\n"
    if callback_data == "doc_vacation":
        document_path = "templates/vacation.doc"
        instruction = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è <u>–æ—Ç–ø—É—Å–∫–∞</u>."
    elif callback_data == "doc_sick_leave":
        document_path = "templates/sick_leave.doc"
        instruction = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è <u>–±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ</u>."
    elif callback_data == "doc_business_trip":
        document_path = "templates/trip.doc"
        instruction = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è <u>–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏</u>."
    else:
        return  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ callback_data
    if document_path.startswith("http"):  # –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª
        doc = URLInputFile(document_path)
    else:
        doc = FSInputFile(document_path)
    await bot.delete_message(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
    )
    await bot.send_document(
        chat_id, document=doc, caption=text+instruction, parse_mode="HTML"
    )  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    main_menu_text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
           f"\n\n<b>–ò–º—è:</b> {callback_query.from_user.first_name}"\
           f"\n<b>–°–ª–µ–¥—É—é—â–∞—è –ó–ü:</b> 01.10.2023"\
           f"\n<b>–î–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞:</b> 15"\
           f"\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–±–æ—Ç—ã, –ø—Ä–æ—Å—Ç–æ <u>–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É</u>  –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."
    await bot.send_message(
        callback_query.from_user.id,
        text=main_menu_text,
        reply_markup=get_main_menu_markup(),
        parse_mode="HTML"
    )


@dp.callback_query(lambda c: c.data and c.data.startswith("back_to_main"))
async def back_to_main(callback_query: types.CallbackQuery):
    markup = get_main_menu_markup()
    await bot.edit_message_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=markup,
    )


@dp.callback_query(lambda c: c.data and c.data.startswith("all_faq"))
async def show_faq_menu(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    item1 = InlineKeyboardButton(text="üèñÔ∏è –û—Ç–ø—É—Å–∫", callback_data="faq_vacation")
    item3 = InlineKeyboardButton(text="üí∞ –ó–ü", callback_data="faq_salary")
    item4 = InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –î–ú–°", callback_data="faq_sick_leave")
    
    item_back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
                [item3, item4],
                [item1],
                [item_back]
            ]
        )

    text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
           f"\n\n–í—ã–±–∏—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É"
    
    await bot.edit_message_text(
        text=text,
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )


async def answer_faq(callback_query: types.CallbackQuery, state: FSMContext, type: str):
    await bot.answer_callback_query(callback_query.id)
    await state.update_data(message_count=0)
    await state.set_state(UserState.message_count)
    await bot.delete_message(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
    )
    text = text = f"üë±‚Äç‚ôÄÔ∏è <b><u>–•—å—é—Å—Ç–æ–Ω</u></b>"\
           f"\n\n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
    await bot.send_message(
        text=text,
        parse_mode="HTML",
        chat_id=callback_query.from_user.id
    )
    await bot.send_message(
        callback_query.from_user.id, FAQ_ANSWERS.get(type, "FAQ –ø—É—Å—Ç")
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_markup(),
    )


@dp.callback_query(lambda c: c.data and c.data.startswith("faq_salary"))
async def process_callback_salary(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await answer_faq(callback_query, state, "salary")


@dp.callback_query(lambda c: c.data and c.data.startswith("faq_vacation"))
async def process_callback_salary(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await answer_faq(callback_query, state, "vacation")


@dp.callback_query(lambda c: c.data and c.data.startswith("faq_sick_leave"))
async def process_callback_salary(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await answer_faq(callback_query, state, "sick_leave")


@dp.callback_query(lambda c: c.data and c.data.startswith("ask"))
async def process_callback_kb1btn1(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await bot.answer_callback_query(callback_query.id)
    await state.update_data(message_count=0)
    await state.set_state(UserState.message_count)
    await bot.send_message(callback_query.from_user.id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")


@dp.message(UserState.message_count)
async def process_message(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    message_count = user_data.get("message_count", 0) + 1
    await state.update_data({"message_count": message_count})

    chat_id = message.chat.id
    question = message.text
    await save_message_database(chat_id, "q", question)
    answer = get_answer(chat_id, question)
    await save_message_database(chat_id, "a", answer)

    if message_count == N_TRIES:
        item1 = InlineKeyboardButton(
            text="–î–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"
        )
        item2 = InlineKeyboardButton(
            text="–ù–µ—Ç, —Å–≤—è–∂–∏—Ç–µ –º–µ–Ω—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º", callback_data="contact_operator"
        )

        markup = InlineKeyboardMarkup(inline_keyboard=[[item1], [item2]])
        await message.answer(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {answer}.")
        await message.answer(
            "–Ø —Å–º–æ–≥–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å?",
            reply_markup=markup,
        )
        await state.update_data({"message_count": 0})
    else:
        item1 = InlineKeyboardButton(
            text="–î–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"
        )

        markup = InlineKeyboardMarkup(inline_keyboard=[[item1]])
        await message.answer(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {answer}")

        await message.answer(
            f"–Ø —Å–º–æ–≥–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å?\n"
            "–ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            reply_markup=markup,
        )


@dp.callback_query(lambda c: c.data and c.data.startswith("contact_operator"))
async def process_callback_operator(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º...")


@dp.callback_query(lambda c: c.data and c.data.startswith("contact_operator"))
async def process_resolved(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º...")


async def main() -> None:
    await on_startup(dp)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)

    asyncio.run(main())
